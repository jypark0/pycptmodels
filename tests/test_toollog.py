import numpy as np

from pycptmodels.erm import ToolERM
from pycptmodels.input import PoissonProcessInput


def test_train(flowline):
    input1 = PoissonProcessInput(N=100, lambda_=1000, lotsizes=[5], lotsize_weights=[
        1], reticle=[200, 200], prescan=[400, 400], K=3)
    input1.initialize()
    input1.A = [0, 100, 300, 1200, 1300, 1800, 2100, 2500, 3300, 4300, 6100, 7200, 11700, 12100, 12300, 12500, 13100,
                13500, 13700, 13900, 14100, 14700, 16000, 16600, 17500, 18200, 20800, 22200, 23000, 23700, 24000, 24800,
                26000, 28700, 29900, 30600, 31300, 31500, 34100, 34800, 35000, 38900, 39200, 39300, 39600, 40300, 47200,
                47400, 49400, 51900, 53300, 54000, 55200, 58100, 60500, 60600, 60900, 61300, 61400, 62300, 64300, 66600,
                67500, 68700, 70100, 70600, 75700, 77200, 77900, 77900, 78000, 78200, 78900, 78900, 79800, 80300, 80600,
                81100, 81700, 82000, 82100, 82500, 82700, 83100, 83300, 83500, 83600, 83800, 83900, 84900, 85900, 86000,
                88700, 89800, 89900, 91500, 94100, 95000, 96000, 96300]
    input1.W = [5] * input1.N
    input1.lotclass = [1, 2, 0, 0, 1, 0, 0, 2, 0, 1, 2, 0, 0, 2, 1, 2, 0, 1, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0,
                       1, 2, 2, 0, 1, 2, 2, 0, 2, 2, 1, 2, 0, 1, 0, 1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 2, 0, 1, 0, 2, 0, 0,
                       2, 1, 0, 2, 2, 2, 2, 0, 1, 0, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1, 2, 0, 1,
                       1, 1, 1, 2]

    FL = flowline
    FL.initialize()
    FL.run(input1)

    erm = ToolERM()
    erm.train(input1, FL.X, FL.L, FL.S, FL.C, FL.C_w, FL.BN, FL.R, FL.move, FL.pick)

    assert np.array_equal(erm.phi1,
                          [1, 2, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 29, 30, 31, 32,
                           33, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62,
                           64, 65, 66, 67, 73, 74, 78, 80, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95])
    assert np.array_equal(erm.A1, [110., 110., 110.])
    assert np.array_equal(erm.B1, [1433., 1433., 1603.])

    assert np.array_equal(erm.phi2,
                          [3, 6, 12, 22, 26, 27, 28, 34, 38, 41, 48, 49, 55, 57, 63, 68, 69, 70, 71, 72, 75, 76, 77, 79,
                           81, 82, 83, 91, 96, 97, 98])
    assert np.array_equal(erm.A2, [110., 110., 110.])
    assert np.array_equal(erm.B2, [[310., 0., 310.], [310., 310., 0.], [310., 0., 310.]])

    assert np.array_equal(erm.L_eq,
                          [2, 5, 11, 21, 25, 26, 33, 37, 40, 47, 48, 52, 53, 54, 56, 62, 67, 68, 69, 74, 75, 78, 80, 81,
                           90, 95, 96, 97])
    assert np.array_equal(erm.L_neq,
                          [1, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31,
                           32, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 55, 57, 58, 59, 60, 61, 63, 64,
                           65, 66, 70, 71, 72, 73, 76, 77, 79, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 98])
    assert np.allclose(erm.Dm, [1993.55556, 2108.555556, 2057.3])
    assert np.allclose(erm.Dp, [2114.4, 2055.5, 2094])

    assert np.allclose(erm.E, [[182.222, 1570.5, 1237.6], [1230.357, 669.444, 1204.875], [1303.636, 1205.833, 11.5]])


def test_run(flowline):
    input1 = PoissonProcessInput(N=100, lambda_=1000, lotsizes=[5], lotsize_weights=[
        1], reticle=[200, 200], prescan=[400, 400], K=3)
    input1.initialize()
    input1.A = [0, 100, 300, 1200, 1300, 1800, 2100, 2500, 3300, 4300, 6100, 7200, 11700, 12100, 12300, 12500, 13100,
                13500, 13700, 13900, 14100, 14700, 16000, 16600, 17500, 18200, 20800, 22200, 23000, 23700, 24000, 24800,
                26000, 28700, 29900, 30600, 31300, 31500, 34100, 34800, 35000, 38900, 39200, 39300, 39600, 40300, 47200,
                47400, 49400, 51900, 53300, 54000, 55200, 58100, 60500, 60600, 60900, 61300, 61400, 62300, 64300, 66600,
                67500, 68700, 70100, 70600, 75700, 77200, 77900, 77900, 78000, 78200, 78900, 78900, 79800, 80300, 80600,
                81100, 81700, 82000, 82100, 82500, 82700, 83100, 83300, 83500, 83600, 83800, 83900, 84900, 85900, 86000,
                88700, 89800, 89900, 91500, 94100, 95000, 96000, 96300]
    input1.W = [5] * input1.N
    input1.lotclass = [1, 2, 0, 0, 1, 0, 0, 2, 0, 1, 2, 0, 0, 2, 1, 2, 0, 1, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 0,
                       1, 2, 2, 0, 1, 2, 2, 0, 2, 2, 1, 2, 0, 1, 0, 1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 2, 0, 1, 0, 2, 0, 0,
                       2, 1, 0, 2, 2, 2, 2, 0, 1, 0, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 1, 0, 2, 0, 1, 2, 0, 0, 1, 2, 0, 1,
                       1, 1, 1, 2]

    FL = flowline
    FL.initialize()
    FL.run(input1)

    erm = ToolERM()
    erm.train(input1, FL.X, FL.L, FL.S, FL.C, FL.C_w, FL.BN, FL.R, FL.move, FL.pick)
    erm.run(input1)

    assert np.allclose(erm.V,
                       [-182.50, 1254.83, 2371.88, 3001.03, 4048.89, 5498.83, 6127.99, 7380.63, 8376.83, 9424.68,
                        10579.52, 11696.56, 12325.72, 13578.35, 14600.73, 15755.56, 16751.76, 17799.62, 18954.45,
                        19976.83, 21131.66, 22100.98, 22904.04, 24233.14, 25280.99, 26730.94, 27480.94, 28110.09,
                        29157.95, 30312.78, 31335.16, 32664.26, 33712.12, 34903.65, 35616.95, 36613.15, 37661.01,
                        38852.54, 39565.84, 40562.04, 41851.38, 42564.68, 43587.05, 44741.88, 45738.08, 46785.94,
                        48529.10, 49523.90, 50273.90, 52386.94, 54629.10, 55881.74, 56851.06, 58533.89, 60933.89,
                        61736.94, 62928.48, 63641.78, 64637.98, 65685.83, 67014.93, 68267.57, 69384.62, 70013.77,
                        71352.64, 72375.01, 77029.10, 78489.34, 79239.34, 79989.34, 80702.64, 81698.84, 82746.69,
                        84075.79, 85365.13, 86115.13, 86828.43, 87824.63, 89113.97, 89827.27, 90944.31, 91694.31,
                        92323.47, 93576.10, 94598.48, 95927.58, 97180.21, 98176.41, 99224.27, 100379.10, 101496.15,
                        102125.30, 103173.16, 104327.99, 105324.19, 106319.00, 107069.00, 107819.00, 108622.05,
                        0.], rtol=1e-4, atol=1e-5)
    assert np.allclose(erm.L,
                       [0.00, 100.00, 1254.83, 2371.88, 3001.03, 4048.89, 5498.83, 6127.99, 7380.63, 8376.83, 9424.68,
                        10579.52, 11700.00, 12325.72, 13578.35, 14600.73, 15755.56, 16751.76, 17799.62, 18954.45,
                        19976.83, 21131.66, 22100.98, 22904.04, 24233.14, 25280.99, 26730.94, 27480.94, 28110.09,
                        29157.95, 30312.78, 31335.16, 32664.26, 33712.12, 34903.65, 35616.95, 36613.15, 37661.01,
                        38852.54, 39565.84, 40562.04, 41851.38, 42564.68, 43587.05, 44741.88, 45738.08, 47200.00,
                        48529.10, 49523.90, 51900.00, 53300.00, 54629.10, 55881.74, 58100.00, 60500.00, 60933.89,
                        61736.94, 62928.48, 63641.78, 64637.98, 65685.83, 67014.93, 68267.57, 69384.62, 70100.00,
                        71352.64, 75700.00, 77200.00, 78489.34, 79239.34, 79989.34, 80702.64, 81698.84, 82746.69,
                        84075.79, 85365.13, 86115.13, 86828.43, 87824.63, 89113.97, 89827.27, 90944.31, 91694.31,
                        92323.47, 93576.10, 94598.48, 95927.58, 97180.21, 98176.41, 99224.27, 100379.10, 101496.15,
                        102125.30, 103173.16, 104327.99, 105324.19, 106319.00, 107069.00, 107819.00, 108622.05],
                       rtol=1e-4, atol=1e-5)
    assert np.allclose(erm.S,
                       [0.00, 1305.83, 2492.43, 2554.10, 4231.39, 5619.39, 5681.06, 7431.63, 8618.23, 9607.18, 10630.52,
                        11817.12, 11882.22, 13629.35, 14783.23, 15806.56, 16993.16, 17982.12, 19005.45, 20159.33,
                        21182.66, 22336.54, 22770.42, 24474.54, 25463.49, 26851.49, 26913.16, 27663.16, 29340.45,
                        30363.78, 31517.66, 32905.66, 33894.62, 34917.95, 34915.15, 36854.55, 37843.51, 38866.84,
                        38864.04, 40803.44, 41865.68, 41862.88, 43769.55, 44792.88, 45979.48, 46968.44, 48770.50,
                        49759.46, 50193.35, 52569.44, 54870.50, 55932.74, 57086.61, 58769.44, 61169.44, 61603.33,
                        62942.78, 62939.98, 64879.38, 65868.33, 67256.33, 68318.57, 69505.17, 69566.84, 71403.64,
                        72557.51, 77270.50, 78503.64, 78500.84, 79250.84, 80000.84, 81940.24, 82929.19, 84317.19,
                        85379.43, 85376.63, 86126.63, 88066.03, 89128.27, 89125.47, 91064.87, 91126.53, 91876.53,
                        93627.10, 94780.98, 96168.98, 97231.21, 98417.81, 99406.77, 100430.10, 101616.70, 101678.37,
                        103355.66, 104378.99, 105565.59, 106554.55, 106988.44, 107738.44, 108488.44, 109827.89],
                       rtol=1e-4, atol=1e-5)
    assert np.allclose(erm.C,
                       [1873.00, 3348.83, 4365.43, 5115.43, 6104.39, 7492.39, 8242.39, 9474.63, 10491.23, 11480.18,
                        12673.52, 13690.12, 14440.12, 15672.35, 16656.23, 17849.56, 18866.16, 19855.12, 21048.45,
                        22032.33, 23225.66, 24209.54, 24959.54, 26347.54, 27336.49, 28724.49, 29474.49, 30224.49,
                        31213.45, 32406.78, 33390.66, 34778.66, 35767.62, 36960.95, 37710.95, 38727.55, 39716.51,
                        40909.84, 41659.84, 42676.44, 43908.68, 44658.68, 45642.55, 46835.88, 47852.48, 48841.44,
                        50643.50, 51632.46, 52382.46, 54442.44, 56743.50, 57975.74, 58959.61, 60642.44, 63042.44,
                        63792.44, 64985.78, 65735.78, 66752.38, 67741.33, 69129.33, 70361.57, 71378.17, 72128.17,
                        73446.64, 74430.51, 79143.50, 80546.64, 81296.64, 82046.64, 82796.64, 83813.24, 84802.19,
                        86190.19, 87422.43, 88172.43, 88922.43, 89939.03, 91171.27, 91921.27, 92937.87, 93687.87,
                        94437.87, 95670.10, 96653.98, 98041.98, 99274.21, 100290.81, 101279.77, 102473.10, 103489.70,
                        104239.70, 105228.66, 106421.99, 107438.59, 108427.55, 109177.55, 109927.55, 110677.55,
                        111870.89], rtol=1e-4, atol=1e-5)
    assert np.allclose(erm.Vm,
                       [-235.56, 1291.53, 2371.88, 3121.88, 3995.83, 5498.83, 6248.83, 7417.33, 8497.67, 9371.63,
                        10616.22, 11696.56, 12446.56, 13615.05, 14547.67, 15792.26, 16872.61, 17746.56, 18991.15,
                        19923.77, 21168.36, 22100.98, 22850.98, 24353.98, 25227.94, 26730.94, 27480.94, 28230.94,
                        29104.89, 30349.48, 31282.10, 32785.10, 33659.06, 34903.65, 35653.65, 36733.99, 37607.95,
                        38852.54, 39602.54, 40682.88, 41851.38, 42601.38, 43534.00, 44778.58, 45858.93, 46732.89,
                        48649.94, 49523.90, 50273.90, 52333.89, 54749.94, 55918.44, 56851.06, 58533.89, 60933.89,
                        61683.89, 62928.48, 63678.48, 64758.82, 65632.78, 67135.78, 68304.27, 69384.62, 70134.62,
                        71389.34, 72321.96, 77149.94, 78489.34, 79239.34, 79989.34, 80739.34, 81819.68, 82693.64,
                        84196.64, 85365.13, 86115.13, 86865.13, 87945.47, 89113.97, 89863.97, 90944.31, 91694.31,
                        92444.31, 93612.80, 94545.42, 96048.42, 97216.91, 98297.26, 99171.22, 100415.80, 101496.15,
                        102246.15, 103120.11, 104364.69, 105445.04, 106319.00, 107069.00, 107819.00, 108569.00,
                        109813.59], rtol=1e-4, atol=1e-5)
    assert np.allclose(erm.Vp,
                       [-182.50, 1254.83, 2251.03, 3001.03, 4048.89, 5377.99, 6127.99, 7380.63, 8376.83, 9424.68,
                        10579.52, 11575.72, 12325.72, 13578.35, 14600.73, 15755.56, 16751.76, 17799.62, 18954.45,
                        19976.83, 21131.66, 22154.04, 22904.04, 24233.14, 25280.99, 26610.09, 27360.09, 28110.09,
                        29157.95, 30312.78, 31335.16, 32664.26, 33712.12, 34866.95, 35616.95, 36613.15, 37661.01,
                        38815.84, 39565.84, 40562.04, 41814.68, 42564.68, 43587.05, 44741.88, 45738.08, 46785.94,
                        48529.10, 49576.96, 50326.96, 52386.94, 54629.10, 55881.74, 56904.11, 58586.94, 60986.94,
                        61736.94, 62891.78, 63641.78, 64637.98, 65685.83, 67014.93, 68267.57, 69263.77, 70013.77,
                        71352.64, 72375.01, 77029.10, 78452.64, 79202.64, 79952.64, 80702.64, 81698.84, 82746.69,
                        84075.79, 85328.43, 86078.43, 86828.43, 87824.63, 89077.27, 89827.27, 90823.47, 91573.47,
                        92323.47, 93576.10, 94598.48, 95927.58, 97180.21, 98176.41, 99224.27, 100379.10, 101375.30,
                        102125.30, 103173.16, 104327.99, 105324.19, 106372.05, 107122.05, 107872.05, 108622.05,
                        109776.89], rtol=1e-4, atol=1e-5)

    # CT, LRT, TT
    assert np.allclose(erm.CT,
                       [1873.00, 3248.83, 4065.43, 3915.43, 4804.39, 5692.39, 6142.39, 6974.63, 7191.23, 7180.18,
                        6573.52, 6490.12, 2740.12, 3572.35, 4356.23, 5349.56, 5766.16, 6355.12, 7348.45, 8132.33,
                        9125.66, 9509.54, 8959.54, 9747.54, 9836.49, 10524.49, 8674.49, 8024.49, 8213.45, 8706.78,
                        9390.66, 9978.66, 9767.62, 8260.95, 7810.95, 8127.55, 8416.51, 9409.84, 7559.84, 7876.44,
                        8908.68, 5758.68, 6442.55, 7535.88, 8252.48, 8541.44, 3443.50, 4232.46, 2982.46, 2542.44,
                        3443.50, 3975.74, 3759.61, 2542.44, 2542.44, 3192.44, 4085.78, 4435.78, 5352.38, 5441.33,
                        4829.33, 3761.57, 3878.17, 3428.17, 3346.64, 3830.51, 3443.50, 3346.64, 3396.64, 4146.64,
                        4796.64, 5613.24, 5902.19, 7290.19, 7622.43, 7872.43, 8322.43, 8839.03, 9471.27, 9921.27,
                        10837.87, 11187.87, 11737.87, 12570.10, 13353.98, 14541.98, 15674.21, 16490.81, 17379.77,
                        17573.10, 17589.70, 18239.70, 16528.66, 16621.99, 17538.59, 16927.55, 15077.55, 14927.55,
                        14677.55, 15570.89], rtol=1e-4, atol=1e-5)
    assert np.allclose(erm.LRT,
                       [1873, 2043, 1873, 2561.333333, 1873, 1873, 2561.333333, 2043, 1873, 1873, 2043, 1873,
                        2557.895094, 2043, 1873, 2043, 1873, 1873, 2043, 1873, 2043, 1873, 2189.111111, 1873, 1873,
                        1873, 2561.333333, 2561.333333, 1873, 2043, 1873, 1873, 1873, 2043, 2795.8, 1873, 1873, 2043,
                        2795.8, 1873, 2043, 2795.8, 1873, 2043, 1873, 1873, 1873, 1873, 2189.111111, 1873, 1873, 2043,
                        1873, 1873, 1873, 2189.111111, 2043, 2795.8, 1873, 1873, 1873, 2043, 1873, 2561.333333, 2043,
                        1873, 1873, 2043, 2795.8, 2795.8, 2795.8, 1873, 1873, 1873, 2043, 2795.8, 2795.8, 1873, 2043,
                        2795.8, 1873, 2561.333333, 2561.333333, 2043, 1873, 1873, 2043, 1873, 1873, 2043, 1873,
                        2561.333333, 1873, 2043, 1873, 1873, 2189.111111, 2189.111111, 2189.111111, 2043],
                       rtol=1e-4, atol=1e-5)
    assert np.allclose(erm.TT,
                       [1873, 1475.833333, 1016.6, 750, 988.9571429, 1388, 750, 1232.236364, 1016.6, 988.9571429,
                        1193.333333, 1016.6, 750, 1232.236364, 983.875, 1193.333333, 1016.6, 988.9571429, 1193.333333,
                        983.875, 1193.333333, 983.875, 750, 1388, 988.9571429, 1388, 750, 750, 988.9571429, 1193.333333,
                        983.875, 1388, 988.9571429, 1193.333333, 750, 1016.6, 988.9571429, 1193.333333, 750, 1016.6,
                        1232.236364, 750, 983.875, 1193.333333, 1016.6, 988.9571429, 1802.058766, 988.9571429, 750,
                        1873, 1873, 1232.236364, 983.875, 1682.833081, 1873, 750, 1193.333333, 750, 1016.6, 988.9571429,
                        1388, 1232.236364, 1016.6, 750, 1318.465079, 983.875, 1873, 1403.136364, 750, 750, 750, 1016.6,
                        988.9571429, 1388, 1232.236364, 750, 750, 1016.6, 1232.236364, 750, 1016.6, 750, 750,
                        1232.236364, 983.875, 1388, 1232.236364, 1016.6, 988.9571429, 1193.333333, 1016.6, 750,
                        988.9571429, 1193.333333, 1016.6, 988.9571429, 750, 750, 750, 1193.333333],
                       rtol=1e-4, atol=1e-5)

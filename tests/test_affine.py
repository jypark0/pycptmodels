import numpy as np

from pycptmodels.input import PoissonProcessInput
from pycptmodels.linear import AffineModel


def test_train(flowline):
    input1 = PoissonProcessInput(N=50, lambda_=1500, lotsizes=[5], lotsize_weights=[1], reticle=[250, 250],
                                 prescan=[0, 0], K=3)
    input1.initialize()
    input1.A = [0, 400, 900, 1300, 4800, 6600, 8700, 10300, 11100, 12000, 13800, 15300, 15800, 22000, 23000, 24300,
                27200, 30900, 32900, 33400, 35900, 36400, 36700, 37400, 39300, 40200, 44300, 46500, 49400, 50000, 51600,
                51600, 54400, 55900, 58400, 58700, 60100, 61800, 63300, 64100, 65000, 68600, 68600, 69800, 74800, 76900,
                77800, 80200, 81700, 82000]
    input1.lotclass = [2, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 2, 2, 2, 2, 0, 2, 0,
                       1, 0, 2, 2, 2, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 1]

    FL = flowline
    FL.initialize()
    FL.run(input1)

    affine = AffineModel()
    affine.train(input1, FL.C, FL.C_w)

    assert np.array_equal(affine.A, [110., 110., 110.])
    assert np.allclose(affine.B, [[831.125, 854, 360], [767.5714286, 1084.333333, 756.6], [1224, 1191.5, 1173.166667]])


def test_run(flowline):
    input1 = PoissonProcessInput(N=50, lambda_=1500, lotsizes=[5], lotsize_weights=[1], reticle=[250, 250],
                                 prescan=[0, 0], K=3)
    input1.initialize()
    input1.A = [0, 400, 900, 1300, 4800, 6600, 8700, 10300, 11100, 12000, 13800, 15300, 15800, 22000, 23000, 24300,
                27200, 30900, 32900, 33400, 35900, 36400, 36700, 37400, 39300, 40200, 44300, 46500, 49400, 50000, 51600,
                51600, 54400, 55900, 58400, 58700, 60100, 61800, 63300, 64100, 65000, 68600, 68600, 69800, 74800, 76900,
                77800, 80200, 81700, 82000]
    input1.lotclass = [2, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 0, 1, 0, 0, 2, 2, 2, 2, 0, 2, 0,
                       1, 0, 2, 2, 2, 2, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 1]

    FL = flowline
    FL.initialize()
    FL.run(input1)

    affine = AffineModel()
    affine.train(input1, FL.C, FL.C_w)
    affine.run(input1)

    assert np.allclose(affine.S,
                       [0.00, 1664.00, 2860.60, 4154.60, 5425.73, 6633.30, 8700.00, 10300.00, 11594.00, 12801.57,
                        14325.90, 15850.24, 17144.24, 22000.00, 23524.33, 25155.83, 27200.00, 30900.00, 32900.00,
                        34194.00, 35900.00, 37194.00, 38465.13, 39672.70, 40966.70, 42237.82, 44300.00, 46500.00,
                        49400.00, 51013.17, 51813.17, 53477.17, 54400.00, 55900.00, 58400.00, 60064.00, 61677.17,
                        63290.33, 64903.50, 66100.10, 67394.10, 68665.23, 70329.23, 71525.83, 74800.00, 76900.00,
                        78171.13, 80200.00, 81700.00, 82907.57])
    assert np.allclose(affine.C,
                       [1664.00, 2860.60, 4154.60, 5425.73, 6633.30, 8157.63, 10224.33, 11594.00, 12801.57, 14325.90,
                        15850.24, 17144.24, 18351.81, 23524.33, 25155.83, 26352.43, 28831.50, 32096.60, 34194.00,
                        35401.57, 37194.00, 38465.13, 39672.70, 40966.70, 42237.82, 43901.82, 45913.17, 48113.17,
                        51013.17, 51813.17, 53477.17, 54277.17, 55607.57, 57194.00, 60064.00, 61677.17, 63290.33,
                        64903.50, 66100.10, 67394.10, 68665.23, 70329.23, 71525.83, 72819.83, 76071.13, 78171.13,
                        79442.25, 81471.13, 82907.57, 84431.90])

    assert np.allclose(affine.CT,
                       [1664.00, 2460.60, 3254.60, 4125.73, 1833.30, 1557.63, 1524.33, 1294.00, 1701.57, 2325.90,
                        2050.24, 1844.24, 2551.81, 1524.33, 2155.83, 2052.43, 1631.50, 1196.60, 1294.00, 2001.57,
                        1294.00, 2065.13, 2972.70, 3566.70, 2937.82, 3701.82, 1613.17, 1613.17, 1613.17, 1813.17,
                        1877.17, 2677.17, 1207.57, 1294.00, 1664.00, 2977.17, 3190.33, 3103.50, 2800.10, 3294.10,
                        3665.22, 1729.22, 2925.83, 3019.83, 1271.13, 1271.13, 1642.25, 1271.13, 1207.57, 2431.90])
    assert np.allclose(affine.LRT,
                       [1664.00, 1196.60, 1294.00, 1271.13, 1207.57, 1524.33, 1524.33, 1294.00, 1207.57, 1524.33,
                        1524.33, 1294.00, 1207.57, 1524.33, 1631.50, 1196.60, 1631.50, 1196.60, 1294.00, 1207.57,
                        1294.00, 1271.13, 1207.57, 1294.00, 1271.13, 1664.00, 1613.17, 1613.17, 1613.17, 800.00,
                        1664.00, 800.00, 1207.57, 1294.00, 1664.00, 1613.17, 1613.17, 1613.17, 1196.60, 1294.00,
                        1271.13, 1664.00, 1196.60, 1294.00, 1271.13, 1271.13, 1271.13, 1271.13, 1207.57, 1524.33])
    assert np.allclose(affine.TT,
                       [1664.00, 1196.60, 1294.00, 1271.13, 1207.57, 1524.33, 1524.33, 1294.00, 1207.57, 1524.33,
                        1524.33, 1294.00, 1207.57, 1524.33, 1631.50, 1196.60, 1631.50, 1196.60, 1294.00, 1207.57,
                        1294.00, 1271.13, 1207.57, 1294.00, 1271.13, 1664.00, 1613.17, 1613.17, 1613.17, 800.00,
                        1664.00, 800.00, 1207.57, 1294.00, 1664.00, 1613.17, 1613.17, 1613.17, 1196.60, 1294.00,
                        1271.13, 1664.00, 1196.60, 1294.00, 1271.13, 1271.13, 1271.13, 1271.13, 1207.57, 1524.33])
